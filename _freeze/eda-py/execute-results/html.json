{
  "hash": "0ec7a1226a6e640da8426ccf6190e34f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Exploratory Data Analysis\"\njupyter: python3\nexecute:\n  echo: true\n  eval: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n::: {#9d1da9a3 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\n# Get working directory\n\n::: {#7ed1ae73 .cell execution_count=2}\n``` {.python .cell-code}\nos.getcwd()\n```\n:::\n\n\n# Change working directory\n\n::: {#1cbd8af1 .cell execution_count=3}\n``` {.python .cell-code}\nos.chdir(\"C:/Users/partrh/Training/python/speedofanimals\")\n```\n:::\n\n\n# Create a series\n\n::: {#be218874 .cell execution_count=4}\n``` {.python .cell-code}\npd.Series([\"African Bush Elephant\",\"African Wild Dog\",\"Black Mamba\",\"Brown Bear\",\"Cheetah\"])\n```\n:::\n\n\n# Create a dataframe\n\n::: {#7132bf7c .cell execution_count=5}\n``` {.python .cell-code}\npd.DataFrame({\"name\": [\"African Bush Elephant\",\"African Wild Dog\",\"Black Mamba\",\"Brown Bear\",\"Cheetah\"], \"habitat\": [\"Land\",\"Land\",\"Land\",\"Land\",\"Land\"],\"speed\": [40,72.5,32.2,35,120]})\n```\n:::\n\n\n# Import data\n\n::: {#a1240190 .cell execution_count=6}\n``` {.python .cell-code}\ndf = pd.read_csv(\"data/speed_of_animals.csv\")\n```\n:::\n\n\n# Explore data\n\n::: {#6ffdaefc .cell execution_count=7}\n``` {.python .cell-code}\ndf.info() # overview\ndf.shape # rows and columns\ndf.dtypes # data types\ndf['name'].dtypes # data type of individual column\ndf.columns.tolist() # list columns\n```\n:::\n\n\n::: {#34a595a4 .cell execution_count=8}\n``` {.python .cell-code}\n# Sort data\ndf.sort_values(by = \"speed_kph\", ascending = False)\ndf.sort_values(by=[\"speed_kph\", \"habitat\"], ascending=[False, False]) # sort by group\n```\n:::\n\n\n::: {#b6f633e1 .cell execution_count=9}\n``` {.python .cell-code}\n# Select columns\ndf[[\"name\",\"speed_kph\"]]\n```\n:::\n\n\n::: {#53c2dca9 .cell execution_count=10}\n``` {.python .cell-code}\n# Select columns by data type\ndf.select_dtypes(include=[\"O\"]) # or 'object'\ndf.select_dtypes(include=[\"integer\"])\ndf.select_dtypes(include=[\"float\"])\n```\n:::\n\n\n# Filtering\n\n::: {#43238942 .cell execution_count=11}\n``` {.python .cell-code}\ndf[df['name'] == \"Wahoo\"]\ndf[df['speed_kph'] > 100]\ndf[(df[\"habitat\"] == \"Land\") & (df[\"speed_kph\"] > 100)]\n\nanimals = [\"Cheetah\", \"Ostrich\", \"Common Octopus\"]\ndf[df[\"name\"].isin(animals)] # multiple values\n\ndf[df[\"mass_kg\"].between(0, 1)] # between\n\ndf[~(df[\"habitat\"] == \"Land\")] # not equal to\n\ndf[df[\"name\"].str.contains(\"Do\")] # contains string (case sensitive)\n```\n:::\n\n\n# Create new columns\n\n::: {#78ffcd14 .cell execution_count=12}\n``` {.python .cell-code}\ndf[\"speed_mph\"] = df[\"speed_kph\"] * 0.6213\ndf[\"fastest\"] = df[\"speed_mph\"] > 60\n```\n:::\n\n\n# Mapping new values\n\n::: {#e65ea7e3 .cell execution_count=13}\n``` {.python .cell-code}\ndf[\"aka\"] = df[\"name\"].map({\"Cheetah\":\"Big cat\",\n                            \"Black Mamba\":\"Poisonous snake\", \n                            \"Killer Whale\": \"Orca\"})\n```\n:::\n\n\n# Deleting columns\n\n::: {#01fb286a .cell execution_count=14}\n``` {.python .cell-code}\ndel df[\"aka\"]\ndf.drop(columns = ['fastest', 'aka'], axis = 1, inplace = True)\n```\n:::\n\n\n# Merging data\n\n::: {#9e430025 .cell execution_count=15}\n``` {.python .cell-code}\ndf_merge = pd.merge(left = joining_data1,\n                    right = joining_data2, \n                    how = \"left\",\n                    on = \"name\",\n                    indicator = True)\n```\n:::\n\n\n# Unique values\n\n::: {#5c8e4e26 .cell execution_count=16}\n``` {.python .cell-code}\ndf[\"habitat\"].unique()\n```\n:::\n\n\n# Recode values\n\n::: {#9a1ee204 .cell execution_count=17}\n``` {.python .cell-code}\ndf.loc[df[\"habitat\"] == \"Water\", \"habitat\"]  = \"Marine\"\ndf[df[\"habitat\"] == \"Marine\"].head()\n```\n:::\n\n\n# Change strings to lowercase\n\n::: {#7c15a00f .cell execution_count=18}\n``` {.python .cell-code}\ndf[\"habitat\"] = df[\"habitat\"].str.lower()\n```\n:::\n\n\n# Rename columns\n\n::: {#68893da8 .cell execution_count=19}\n``` {.python .cell-code}\ndf.rename(columns={\"name\": \"animal_name\"}, inplace = True)\n```\n:::\n\n\n# Fix missing values\n\n::: {#ab81e097 .cell execution_count=20}\n``` {.python .cell-code}\ndf.dtypes\ndf[df['speed_kph'] == \".\"]\ndf.loc[df[\"speed_kph\"] == \".\", \"speed_kph\"] = None # set \".\" to None\ndf[\"speed_kph\"] = pd.to_numeric(df[\"speed_kph\"]) # convert to number\ndf[\"speed_kph\"].dtypes # check results\n```\n:::\n\n\n::: {#8b55be67 .cell execution_count=21}\n``` {.python .cell-code}\n# Summary statistics\ndf.describe()\ndf['length_cm'].min()\ndf['length_cm'].max()\ndf['length_cm'].quantile(q=0.25)\ndf['length_cm'].quantile(q=[0, 0.25, 0.5, 0.75, 1])\ndf['length_cm'].mean()\ndf['length_cm'].mode()\ndf['length_cm'].median()\ndf['length_cm'].std()\ndf['length_cm'].var()\ndf['length_cm'].count()\ndf['length_cm'].isna().sum() # count NA values\ndf['habitat'].value_counts() # count by group\ndf['habitat'].unique() # unique values\ndf['habitat'].nunique() # number of unique values\ndf['length_cm_bins'] = pd.cut(df[\"length_cm\"], bins = 10) # create size bands\ndf['length_cm_bins'].unique()\n\ndf[\"length_cm_bins_labels\"] = pd.cut(df[\"length_cm\"], # custom bins and labels\n                                     bins = np.arange(start = 0, stop = (df[\"length_cm\"].max() + 1), step = 1000), \n                                     labels = [\"Short\",\"Average\",\"Long\"])\ndf[\"length_cm_bins_labels\"].unique()\ndf.groupby(by = \"habitat\")[\"length_cm\"].count() # count by group\ndf.groupby(by = \"habitat\")[\"length_cm\"].mean() # mean by group\ndf.groupby(by = \"habitat\").agg({\"length_cm\": \"mean\", # summary statisics by group\n                                \"mass_kg\": \"mean\", \n                                \"speed_kph\": \"mean\"})\n```\n:::\n\n\n",
    "supporting": [
      "eda-py_files"
    ],
    "filters": [],
    "includes": {}
  }
}