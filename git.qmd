# Git {.unnumbered}

## Useful commands

### Configure git
set name for commits  
`$  git config --global user.name "Your Name"`   

set email address for commits   
`$ git config --global user.email "you@example.com"`    

check email is set correctly        
`$ git config --global user.email`    
     
list all configuration values    
`$ git config --list`       

### Help?
list all config options    
`$ git config --help`       

### Change directory and create folder
set directory   
`$ cd C:/Users/partrh/GitHub`    

create directory    
`$ mkdir cheatsheets`    

change directory     
`$ cd cheatsheets`   
 
list contents of directory   
`$ ls`    

### Initialise existing repo
track directory with git   
`$ git init`    

remove git from directory   
`$ rm -rf .git`     

create .gitignore file    
`$ touch .gitignore`    

### Staging
add all untracked files to staging area  
`$ git add -A`    

add particular file to staging area     
`$ git add cheatsheet.md`     

remove all files from staging area   
`$ git reset`     

remove particular file from staging area      
`$ git reset cheatsheet.md`     

### Commit
commit with message    
`$ git commit -m "Meaningful commit message"`     

compare versions      
`$ git diff`    

### Fork
list all remotes    
`$ git remote -v`    

clone remote repo in current directory   
`$ git clone https://github.com/rcatlord/cheatsheets.git .`     

check remote was cloned successfully    
`$ git remote --verbose`    

### Pull and push
retrieve history from remote branches          
`ยง git fetch`     

pull all branches      
`$ git fetch --all`

pull latest changes from remote into local repo    
`$ git pull`    

push local commits to remote repo  
`$ git push`    

### Create branches
show all branches (local and remote)         
`$ git branch -a`     

check current branch       
`$ git branch`     

check local and remote branches  
`$ git branch -a`    

create new branch called 'dev'    
`$ git branch dev`     

switch to new branch     
`$ git checkout dev`    

push new branch to GitHub       
`$ git push -u origin dev`    

### Merge branches
switch to main branch     
`$ git checkout main`     

pull changes from remote main branch   
`$ git pull origin main`    

show branches that have been merged   
`$ git branch --merged`    
  
merge dev branch     
`$ git merge dev`    

push to main branch   
`$ git push origin main`    

### Deleting branches
show merged branches   
`$ git branch --merged`   

delete dev branch locally   
`$ git branch -d dev`    

check branches on remote     
`$ git branch -a`    

delete branch remotely   
`$ git push origin --delete dev`    

### Undo changes
revert modified files    
`$ git checkout -f`    

remove untracked files    
`$ git clean -fd`

rollback to particular commit and push to remote
```sh 
git reset --hard <commit-hash>`
git push --force origin <branch-name>
```

### git log

```sh
# paging
git config --global core.pager cat  # stop paging results
git config --global core.pager less # page results  
q # to escape pager

# log
git log # all commits in current branch
git log --oneline # all commits on single line in current branch
git log --oneline --all # all commits in all branches
git log --oneline --stat # additions and deletions
git branch -avv # show all branches

# formatting
# https://git-scm.com/docs/pretty-formats
git log --oneline --all --format=format:"%h" # abbreviated commit hashes
git log --oneline --all --format=format:"%h %an %s" # abbreviated commit hashes, author, subject
git shortlog

# limiting
git log --oneline -3 # last 3 commits
git log --oneline --author="rcatlord" # by author
git log --oneline --grep="script" # commits containing string
git log --oneline --since="1 August 2025" # since date
git log --oneline -- hello_NBS.py # by file
git log --follow -p -- hello_NBS.py # history of all commits to file
git log --oneline --all --summary --merges # all merges
git log --author="rcatlord" -p -- hello_NBS.py # diff of all changes by author to file

# summaries
git shortlog -sn --all # count of all commits by user
git shortlog --summary -- labs # count commits by author by folder

# graph
git log --graph --oneline
git log --graph --oneline --all
```

### Miscellaneous
pull specific file from other branch       
`git checkout dev file.txt`

### Typical workflow
```sh
$ git branch dev # create branch
$ git checkout dev # switch to dev branch
$ git status # check current branch
$ git add -A # add changed files to staging area
$ git commit -m "Detailed message" # commit changed files
$ git push -origin dev # push dev branch to remote
$ git checkout main # switch to main branch
$ git pull origin main # pull latest changes to main
$ git merge dev # merge dev to main branch
$ git push origin main # push main branch
$ git branch -d dev # delete local dev branch
$ git push origin --delete dev # delete remote dev branch
```

## Further resources
- [Happy Git and GitHub for the useR ](https://happygitwithr.com/) by Jenny Bryan
- [Software Carpentry Lessons](https://software-carpentry.org/lessons/)
- [Learn Git Branching](https://learngitbranching.js.org/)
- [Pull Request Flow with usethis](https://www.garrickadenbuie.com/blog/pull-request-flow-usethis)
- [Oh Shit, Git!?!](https://ohshitgit.com/)
- [Git good practice: branching](https://www.linkedin.com/posts/samhollings_git-opensource-reproducibleanalyticalpipelines-activity-7202262570357993472-gum5?utm_source=share&utm_medium=member_desktop)
